<h1>About</h1>
<p>這是計算機程式課程 2021 Fall 的作業倉儲與網站 template</p>
<hr/>
<p>41023143</p>
<p>網站倉儲: <a href="https://github.com/shih1717/cp2021_hw">https://github.com/shih1717/cp2021_hw</a> </p>
<p>網站連結: <a href="https://shih1717.github.io/cp2021_hw/">https://shih1717.github.io/cp2021_hw/</a></p>
<p>機械加工丙級證照</p>
<p>run</p><h2>runsrc</h2>
<p>hybrid</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"
 
set Local=C:\2021_cadlab_portable\data
 
%Disk%:
 
set HomePath=%Disk%:\home_ipv4
set HomeDrive=%Disk%:\home_ipv4
set Home=%Disk%:\home_ipv4
set USERPROFILE=%Disk%:\home_ipv4
 
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
 
set PYTHONPATH=%Local%\Python395\DLLs;%Local%\Python395\Lib;%Local%\Python395\Lib\site-packages;
 
set PYTHONHOME=%Local%\Python395
 
REM 使用 putty 設定 git ssh 連線
set GIT_SSH=%Disk%:\putty\plink.exe
 
REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Local%\Python395;%Local%\Python395\Scripts;
set path_portablegit=%Local%\portablegit_2.31.1\bin;
 
path=%Disk%:;%path_python%;%path_portablegit%;%path%;
 
REM ref: https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view
 
REGEDIT.EXE /S %Disk%:\putty_github_com.reg;
 
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
 
start /MIN %Disk%:\wScite\SciTE.exe
start /MIN %Disk%:\wScite\SciTE.exe
 
Exit</pre>
<p></p><pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"
 
set Local=C:\2021_cadlab_portable\data
 
%Disk%:
 
set HomePath=%Disk%:\home_ipv4
set HomeDrive=%Disk%:\home_ipv4
set Home=%Disk%:\home_ipv4
set USERPROFILE=%Disk%:\home_ipv4
 
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
 
set PYTHONPATH=%Local%\Python395\DLLs;%Local%\Python395\Lib;%Local%\Python395\Lib\site-packages;
 
set PYTHONHOME=%Local%\Python395
 
REM 使用 putty 設定 git ssh 連線
set GIT_SSH=%Disk%:\putty\plink.exe
 
REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Local%\Python395;%Local%\Python395\Scripts;
set path_portablegit=%Local%\portablegit_2.31.1\bin;
 
path=%Disk%:;%path_python%;%path_portablegit%;%path%;
 
REM ref: https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view
 
REGEDIT.EXE /S %Disk%:\putty_github_com.reg;
 
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
 
start /MIN %Disk%:\wScite\SciTE.exe
start /MIN %Disk%:\wScite\SciTE.exe
 
Exit</pre>
<br/><br/>hybrid<h2>Hybrid</h2>
<p>將 start_ipv4.bat 與部分檔案放在 USB 隨身碟, 使用 C 槽的 Python395 與 Portablegit:</p>
<p>start_ipv4.bat, data, tmp, wscite 與 home_ipv4, home_ipv6 放在隨身碟:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

set Local=C:\2021_cadlab_portable\data

%Disk%:

set HomePath=%Disk%:\home_ipv4
set HomeDrive=%Disk%:\home_ipv4
set Home=%Disk%:\home_ipv4
set USERPROFILE=%Disk%:\home_ipv4

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Local%\Python395\DLLs;%Local%\Python395\Lib;%Local%\Python395\Lib\site-packages;

set PYTHONHOME=%Local%\Python395

REM 使用 putty 設定 git ssh 連線
set GIT_SSH=%Disk%:\putty\plink.exe

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Local%\Python395;%Local%\Python395\Scripts;
set path_portablegit=%Local%\portablegit_2.31.1\bin;

path=%Disk%:;%path_python%;%path_portablegit%;%path%;

REM ref: https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view

REGEDIT.EXE /S %Disk%:\putty_github_com.reg;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite\SciTE.exe
start /MIN %Disk%:\wScite\SciTE.exe

Exit</pre>
<p><br/><br/>Hybrid</p>
<p></p>
<h2>SSH</h2>
<p>putty</p>
<h1>Exam</h1>
<h2>w13</h2>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/Xiang0502/5dc82b4e7555ede334730d407408f7e3/raw/7351ea03dffebd8fd8bb34b51397e024936201c8/W13"
src = open(url).read()
w13 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w13"].bind("click", w13.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/3a731590f88b0712e8035d5349458bea/raw/8c2df8f1d0441def9e7ef950a367bbfa0ef3afd0/w13-4"
src = open(url).read()
w13_2 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w13_2"].bind("click", w13_2.prog)
</script>
<p><button id="keyword">Keyword</button><button id="w13">列出 10 個座標</button><button id="w13_2">畫表格</button></p><h1>HW1</h1>
<p>HW1 - 網際動畫與 touch typing 佔學期成績 20%.</p>
<p><span style="background-color: #ffff99;">HW1 必須在 2021.10.20 22:00 之前完成</span>.</p>
<p><a href="https://github.com/mdecourse/cp2021/discussions/8">HW1 具體項目成果回報區</a>將於 2021.09.23 開啟, 於 <span style="background-color: #ff99cc;">2021.10.20 22:00 關閉</span></p>
<ol>
<li>HW1程式碼 :<a href="https://gist.githubusercontent.com/shih1717/333f19ed8b1e6b628fe2cfea839cfdc1/raw/78ff8136b9ac4a08f780ff142ad7ad935218ce03/gistfile1.txt">https://gist.githubusercontent.com/shih1717/333f19ed8b1e6b628fe2cfea839cfdc1/raw/78ff8136b9ac4a08f780ff142ad7ad935218ce03/gistfile1.txt</a> </li>
<li><span>HW1程式碼</span><span> :</span><a href="https://gist.githubusercontent.com/shih1717/f3cc28f8932da835b41a5a65d017cad5/raw/53cca653c2dcfbdbb9424a5d279a3bfab04e34c9/gistfile1.txt">https://gist.githubusercontent.com/shih1717/f3cc28f8932da835b41a5a65d017cad5/raw/53cca653c2dcfbdbb9424a5d279a3bfab04e34c9/gistfile1.txt</a>  </li>
<li>英文打字(40min)<a href="https://gist.githubusercontent.com/shih1717/215022b1839aa512b3f623aaa8d56470/raw/6b3ceddd212286d91509d63f09833e1f839bed54/gistfile1.txt">https://gist.githubusercontent.com/shih1717/215022b1839aa512b3f623aaa8d56470/raw/6b3ceddd212286d91509d63f09833e1f839bed54/gistfile1.txt</a> </li>
<li>中文打字(12min)<a href="https://gist.githubusercontent.com/shih1717/ede2b48b1d589da3300986b6bb64aea7/raw/2ce12ecebf200d6289df89c1ff5e88b9f7685276/gistfile1.txt">https://gist.githubusercontent.com/shih1717/ede2b48b1d589da3300986b6bb64aea7/raw/2ce12ecebf200d6289df89c1ff5e88b9f7685276/gistfile1.txt</a> </li>
</ol><h1>HW2</h1>
<p>HW2 - 可攜程式系統與個人網站佔學期成績 20%.</p>
<p><span style="background-color: #ffff99;">HW2 必須在 2021.11.03 22:00 之前完成.</span></p>
<p><a href="https://github.com/mdecourse/cp2021/discussions/9">HW2 具體項目成果回報區</a>將於 2021.10.25 開啟, 於 <span style="background-color: #ff99cc;">2021.11.03 22:00 關閉</span></p>
<p><span style="background-color: #ffffff;">1.可攜系統</span></p>
<p><span style="background-color: #ff99cc;"><img alt="" height="285" src="/images/可攜.png" width="557"/></span></p>
<p><span style="background-color: #ffffff;">2.開啟動態網頁</span></p>
<p><span style="background-color: #ff99cc;"><img alt="" height="296" src="/images/網頁.png" width="556"/></span></p>
<p><span style="background-color: #ffffff;">3.<a href="https://shih1717.github.io/cp2021_hw/content/run.html">run page</a></span></p>
<p><span style="background-color: #ff99cc;"><img alt="" height="291" src="/images/run.png" width="556"/></span></p>
<p></p>
<p></p><h1>HW3</h1>
<p></p>
<p>HW3 - AI 貪食蛇佔學期成績 30%.</p>
<p><span style="background-color: #ffff99;">HW3 必須在 2021.12.22 22:00 之前完成.</span></p>
<p><a href="https://github.com/mdecourse/cp2021/discussions/10">HW3 具體項目成果回報區</a>將於 2021.11.09 開啟, 於 <span style="background-color: #ff99cc;">2021.12.22 22:00 關閉</span></p>
<p>網際貪食蛇的逆襲, 誰的<a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py">自動執行貪食蛇</a>能夠破紀錄? 目前直覺貪食蛇紀錄為 45 節 (除了蛇身節數外, 應該還要置入出現紅色標的物後的總完食時間).</p>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/f188098281ecaeedeea484c074ab34a05c3086eb/manual_snake.py">手動執行貪食蛇</a>程式說明與整理.</p>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py">自動執行貪食蛇</a>程式說明與整理.</p>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py">自動執行貪食蛇</a>程式的改進.</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2021/content/Task3.html">https://mde.tw/cp2021/content/Task3.html</a></p>
<p style="padding-left: 30px;">Brython snake 原始來源: <a href="https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b">https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/snake-Q-Learning">https://github.com/mdecourse/snake-Q-Learning</a></p>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/teaching-a-computer-how-to-play-snake-with-q-learning-93d0a316ddc0">https://towardsdatascience.com/teaching-a-computer-how-to-play-snake-with-q-learning-93d0a316ddc0</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/SnakeQlearning">https://github.com/mdecourse/SnakeQlearning</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/@italohdc/learnsnake-teaching-an-ai-to-play-snake-using-reinforcement-learning-q-learning-b63ac23dfdd1">https://medium.com/@italohdc/learnsnake-teaching-an-ai-to-play-snake-using-reinforcement-learning-q-learning-b63ac23dfdd1</a></p>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36">https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/">https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/</a></p>
<p style="padding-left: 30px;"><a href="https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/">https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2016_Exploration of Reinforcement Learning to SNAKE.pdf">2016_Exploration of Reinforcement Learning to SNAKE.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/train_a_snake_with_reinforceme.pdf">train_a_snake_with_reinforceme.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b">https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/Snake-Reinforcement-Learning">https://github.com/mdecourse/Snake-Reinforcement-Learning</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Autonomous-Agents-in-Snake-Game-via-Deep-Reinforcement-Learning.pdf">Autonomous-Agents-in-Snake-Game-via-Deep-Reinforcement-Learning.pdf</a></p>
<h4>延伸應用:</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/PJl4iabBEz0" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5Vy5Dxu7vDs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/6pJBPPrDO40" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/VGkcmBaeAGM" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://github.com/mdecourse/snake-ai-pytorch">https://github.com/mdecourse/snake-ai-pytorch</a></p>
<h2>Examples</h2>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕. (本動態頁面檔案 <a href="/downloads/Examples.txt">Examples.txt</a>)</p>
<p>1. 從 1 累加到 100 (以下列 button 呈現).</p>
<p>2. 教科書 (<a href="https://link.springer.com/book/10.1007/978-981-10-3277-6">Programming with Python</a>) 2.6 Exercises, 共有三個題目, 請分別將程式製作為按鈕 (button).</p>
<p>3. 請利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas</a> 繪製 Fig. 3.7 的流程圖 (Flow Chart).</p>
<p>4. 請利用 Canvas 繪製你所編寫"從 1 累加到 10"程式的流程圖 (Flow Chart).</p>
<p>5. 請各班各組合力完成 3.5 Exercises 中的 14 個題目.</p>
<p>6. 請各組從 4.3 Exercises 中選擇一個題目製作為頁面中的按鈕 (button).</p>
<p>無 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖需求的程式, 可放在第一區, 而採 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖的程式則可放入第二區.</p>
<p>將 Gist 中的程式導入本頁面的程式段: <a href="/downloads/brython_button_prog.txt">brython_button_prog.txt</a>, 只要配合 button id 對應即可導入編輯區.</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 開始-->
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 結束-->
<p></p>
<!-- button 程式 1 ####################################### button 程式 1 開始-->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()
# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- button 程式 1 ####################################### button 程式 1 結束-->
<p></p>
<!-- button 程式 2 ####################################### button 程式 2 開始-->
<p>第二編輯區程式 (<a href="https://gist.github.com/mdecourse/fd325f7ff3fb71a9653bf156fe53d7dc">編輯</a> Snake 原始碼):</p>
<p><button id="check_input">查驗輸入字串</button><button id="do_snake">Snake</button></p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

check_str_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/56dc6a6b8eaa05b80994ac6f08ebc9326330be43/check_str_input_content_1.py"
# 從 gist 取得程式碼
check_src = open(check_str_url).read()

def check_input(ev):
    Ace3.editor.setValue(check_src)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    #Ace.run()

# id 為 "check_input" 的按鈕點按時, 執行 check_input 方法
doc["check_input"].bind('click', check_input)

############ for snake 開始 ############

# 設定與 gist URL 對應的變數
snake_url = "https://gist.githubusercontent.com/mdecourse/fd325f7ff3fb71a9653bf156fe53d7dc/raw/1bd9880ddd3978cb2b9af9a23954f9f8c2588541/brython_snake.py"
# 根據程式碼所在的 URL 從 gist 取得程式碼
snake_src = open(snake_url).read()

# 設計一個函式, 透過網頁的事件導向驅動方式, 
# 以 button 點擊後將 gist 原始碼導入編輯區(可令其自動執行)
def do_snake(ev):
    # 將程式碼導入編輯區, Ace3 將決定放入的編輯區域
    Ace3.editor.setValue(snake_src)
    # 程式碼導入後, 滑鼠停在第一行
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 取得程式碼後若帶有下一行表示希望即刻執行
    Ace3.run()

# id 為 "do_snake" 的按鈕點按時, 執行 do_snake 方法
doc["do_snake"].bind('click', do_snake)
############ for snake 結束 ############

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 - 第二編輯區 Ace3 共用
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
check_input()
</script>
</p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 -->
<p></p>
<!-- button 程式 2 ####################################### button 程式 2  結束-->
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://zerojudge.tw/">https://zerojudge.tw/</a></p>
<p style="padding-left: 30px;"><a href="https://shaform.com/csdream/docs/problem-solving/">https://shaform.com/csdream/docs/problem-solving/</a></p>
<p style="padding-left: 30px;"><a href="https://onlinejudge.org/">https://onlinejudge.org/</a></p>
<p style="padding-left: 30px;"></p>
<h1>w11</h1>
<h2>w11 run</h2>
<p><button id="w11">w13-1</button><button id="w11_1">w13-2</button><button id="w11_2">/w13-3</button></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
</script>
</p>
<p></p>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/fe16a46f73df3a2042c76380392eec04/raw/cb180dc466843d0d4c3373e7aaf5967d03dfc06d/w13-1"
src = open(url).read()
w11 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w11"].bind("click", w11.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/02cb189ccdd6c31f7e3cbbb000563ddc/raw/67a061f3cfbac699cb945990b8fd8626694f1046/w13-2"
src = open(url).read()
w11_1 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w11_1"].bind("click", w11_1.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/5d9364fbc8cb19bb21b738a079099276/raw/14790642a1ab135444a2e6a0bb4d60eb8880f7c2/w13-3"
src = open(url).read()
w11_2 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w11_2"].bind("click", w11_2.prog)
</script><h1>Final Project</h1>
<p>Final Project 佔學期成績 30%</p>
<p><span style="background-color: #ffff99;">Final Project 必須在 2022.01.05 22:00 之前完成</span>.</p>
<p><a href="https://github.com/mdecourse/cp2021/discussions/11">Final Project 具體項目成果回報區</a>將於 2021.11.09 開啟, 於 <span style="background-color: #ff99cc;">2022.01.05 22:00 關閉</span></p>
<p>利用 Brython 寫一個會<span style="background-color: #ffff99;">令人想玩</span>的網際遊戲.</p>
<h4>參考章節:</h4>
<ol>
<li><a href="https://www.enago.tw/academy/%E5%A6%82%E4%BD%95%E6%92%B0%E5%AF%AB%E6%91%98%E8%A6%81%EF%BC%9F/">專題摘要</a></li>
<li><a href="https://ctld.ntu.edu.tw/ls/strategy/lecture.php?index=126">資料蒐集</a></li>
<li><a href="http://old.gst.org.tw/WPES/guideline_D-a.htm">設計動機</a></li>
<li><a href="https://wordvice.com.tw/%E5%A6%82%E4%BD%95%E5%AF%AB%E5%A5%BD%E8%AB%96%E6%96%87%E4%B8%AD%E7%9A%84%E3%80%8C%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95%E3%80%8D/">設計方法</a></li>
<li><a href="http://microbiology.scu.edu.tw/MIB/wong/courses/writing/result02.htm">結果與討論</a></li>
<li><a href="https://www.enago.tw/academy/what-you-need-to-know-about-the-manuscript-appendix/">附錄</a></li>
</ol>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/collections/web-games">https://github.com/collections/web-games</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/topics/web-game">https://github.com/topics/web-game</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/topics/browser-game">https://github.com/topics/browser-game</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/leereilly/games">https://github.com/leereilly/games</a></p>
<p style="padding-left: 30px;"><a href="https://bmsleight.github.io/brython-blocks/">https://bmsleight.github.io/brython-blocks/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/brython-blocks">https://github.com/mdecourse/brython-blocks</a></p>
<h2>run</h2>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
<p></p>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/fe16a46f73df3a2042c76380392eec04/raw/cb180dc466843d0d4c3373e7aaf5967d03dfc06d/w13-1"
src = open(url).read()
w11 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w11"].bind("click", w11.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/02cb189ccdd6c31f7e3cbbb000563ddc/raw/67a061f3cfbac699cb945990b8fd8626694f1046/w13-2"
src = open(url).read()
w11_1 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w11_1"].bind("click", w11_1.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/5d9364fbc8cb19bb21b738a079099276/raw/14790642a1ab135444a2e6a0bb4d60eb8880f7c2/w13-3"
src = open(url).read()
w11_2 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w11_2"].bind("click", w11_2.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/5c53ffca88ec4e02ef4d6f24888d55b3/raw/91d74559af3c79f660ca2cbcff610506fb32c19b/snake"
src = open(url).read()
snake = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["snake"].bind("click",snake.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/42df0320bb026642c2b1721bc4a8b329/raw/5af187d8ef6525ffe23c0ee63504c557d274f2bd/snake2"
src = open(url).read()
snake2 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["snake2"].bind("click",snake2.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/c98b311b1acf2f93668e7fc0b06d708e/raw/1b3bf7812ec78c3b0060ddb0ce2331f090225b70/snake3"
src = open(url).read()
snake3 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["snake3"].bind("click",snake3.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/25d3b634ec753366f9039011eb335bd1/raw/6713eefeeb8f8a7d7ed9f9a0e0201f4ee206be2c/snake%2520max"
src = open(url).read()
snake4 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["snake4"].bind("click",snake4.prog)
</script>
<p><button id="w11">w13-1</button><button id="w11_1">w13-2</button><button id="w11_2">w13-3</button><button id="snake">蛇</button><button id="snake2">蛇2</button><button id="snake3">蛇3</button><button id="snake4">最終蛇</button></p>
<p>*******************************</p>
<h2>41023143</h2>
<p>1.作業一的紅方塊</p>
<p><button id="w11_1">hw1-1</button><button id="hw1_2">hw1-2</button></p>
<p>2.第十三週小考</p>
<p><button id="w13">w13</button><button id="表格">表格</button><button id="生成隨機紅方塊">生成隨機紅方塊</button></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<p><!-- Cango 程式庫 --></p>
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
</p>
<p><!-- for Konva 程式庫 --></p>
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
</script>
</p>
<p></p>
<p>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/ce74cce738fdace1a88ff8806ea3b880/raw/d86b85e6d36bfafd03e4df755356ec4b26e4de20/hw1-1"
src = open(url).read()
w11_1 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w11_1"].bind("click", w11_1.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/a01da39e30f6bdbac933307b8e4b95b9/raw/3e1be90e592a0ed4aa47cce513da63ba52974592/hw1_2"
src = open(url).read()
hw1_2 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["hw1_2"].bind("click", hw1_2.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/70a60fa595da1dcc1389f3a7e0bc51be/raw/cb5cd6d6ee46cf4e8f38b7e52c08519361c1d115/w13"
src = open(url).read()
w13= beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w13"].bind("click", w13.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/ce96112451ad6a90edaeb2abb8d6bb00/raw/1315eca0f487446e01150a0f4aa5faf4ec9f9bc6/%25E8%25A1%25A8%25E6%25A0%25BC"
src = open(url).read()
表格= beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["表格"].bind("click", 表格.prog)
</script>
<script type="text/python3">
import beditor
from browser import document
url = "https://gist.githubusercontent.com/shih1717/27398b10041779e3dfee7b18becb3049/raw/9a0d552bd6f1201f3ce1d58bd9f8f6b7ceac5a12/%25E9%259A%25A8%25E6%25A9%259F%25E8%25A1%25A8%25E6%25A0%25BC"
src = open(url).read()
生成隨機紅方塊= beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["生成隨機紅方塊"].bind("click", 生成隨機紅方塊.prog)
</script>
</p>